---
- name: "Block | Create user '{{ item_user.key }}'"
  when: item_user.value.state is not defined or
        item_user.value.state == 'present'
  tags: [users]
  block:
    - name: "Get all users"
      ansible.builtin.getent:
        database: passwd
        split: ':'
      tags: [users]

    - name: "ZFS | Create dataset in {{ users_zfs_home_dataset }} for user '{{ item_user.key }}'"
      community.general.zfs:
        name: "{{ users_zfs_home_dataset }}/{{ item_user.key }}"
        state: present
      when:
        - users_zfs_home | bool
        - (item_user.value.create_home is defined and item_user.value.create_home | bool) or
          item_user.value.create_home is undefined
      tags: [users]

    - name: "Creat primary user group for '{{ item_user.key }}'"
      ansible.builtin.group:
        name: "{{ item_user.key }}"
        gid: "{{ item_user.value.gid | default(item_user.value.uid) | default(omit) }}"
        system: "{{ item_user.value.system | default(omit) }}"
      tags: [users]

    - name: "Create user '{{ item_user.key }}'"
      ansible.builtin.user:
        name: "{{ item_user.key }}"
        group: "{{ item_user.value.group | default(item_user.key) }}"
        # next line: empty string removes user from all secondary groups
        groups: "{{ item_user.value.groups | join(',') if 'groups' in item_user.value else '' }}"
        append: "{{ item_user.value.append | default(omit) }}"
        shell: "{{ item_user.value.shell | default(users_default_shell) | default(omit) }}"
        password: "{{ item_user.value.password if item_user.value.password is defined else '!' }}"
        comment: "{{ item_user.value.comment | default(omit) }}"
        uid: "{{ item_user.value.uid | default(omit) }}"
        home: "{{ item_user.value.home | default(omit) }}"
        create_home: "{{ item_user.value.create_home | default(omit) }}"
        update_password: "{{ item_user.value.update_password | default(omit) }}"
        system: "{{ item_user.value.system | default(omit) }}"
      tags: [users]

    - name: "Update home for system user '{{ item_user.key }}'"
      ansible.builtin.user:
        name: "{{ item_user.key }}"
        home: "{{ item_user.value.home if item_user.value.home is defined else users_default_system_home }}"
      when: item_user.value.system is defined and item_user.value.system | bool
      tags: [users]

    # "cp -a /etc/skel/. /home/{{ item_user.key }}"
    - name: "ZFS | Fix profile creation from skel for user '{{ item_user.key }}'"
      ansible.builtin.copy:
        src: "{{ users_default_skel_path }}/."
        dest: "/home/{{ item_user.key }}"
        remote_src:  true
        mode: "preserve"
      when:
        - users_zfs_home | bool
        - (item_user.value.create_home is defined and item_user.value.create_home | bool) or
          item_user.value.create_home is undefined
        - item_user.key not in getent_passwd.keys()
      tags: [users]

    - name: "ZFS | Fix permissions for /home/'{{ item_user.key }}'"
      ansible.builtin.file:
        path: "{{ item_user.value.home | default(users_default_home + '/' + item_user.key) }}"
        # path: "/home/{{ item_user.key }}"
        owner: "{{ item_user.key }}"
        group: "{{ item_user.key }}"
        # mode: "0660"
        recurse: true
        state: directory
      when:
        - users_zfs_home | bool
        - (item_user.value.create_home is defined and item_user.value.create_home | bool) or
          item_user.value.create_home is undefined
        - item_user.key not in getent_passwd.keys()
      tags: [users]

    - name: "Update SSH public keys for user '{{ item_user.key }}'"
      ansible.builtin.include_tasks: update_ssh_keys.yml
      vars:
        _user_name: "{{ item_user.key }}"
        _user_item: "{{ item_user.value }}"
      when: item_user.value.ssh_keys is defined
      tags: [users]

    - name: "Copy config to sudoers.d for '{{ item_user.key }}'"
      ansible.builtin.template:
        src: sudo_nopasswd.j2
        dest: "/etc/sudoers.d/{{ item_user.key | replace('.', '') }}"
        owner: root
        group: root
        mode: 0440
        validate: visudo -cf %s
      when:
        - item_user.value.sudo_nopassword is defined and (item_user.value.sudo_nopassword | bool)
      tags: [users]

- name: "Block | Delete user '{{ item_user.key }}'"
  when:
    - item_user.value.state is defined
    - item_user.value.state == 'absent'
  tags: [users]
  block:
    - name: "ZFS | Delete dataset from {{ users_zfs_home_dataset }} for user '{{ item_user.key }}'"
      community.general.zfs:
        name: "{{ users_zfs_home_dataset }}/{{ item_user.key }}"
        state: absent
      when:
        - users_zfs_home | bool
      tags: [users]

    - name: "Remove user '{{ item_user.key }}'"
      ansible.builtin.user:
        name: "{{ item_user.key }}"
        state: absent
        remove: "{{ item_user.value.remove | default(users_default_remove) | default(omit) }}"
        force: "{{ item_user.value.force | default(users_default_force) | default(omit) }}"
      tags: [users]

    - name: "Delete primary user group for '{{ item_user.key }}'"
      ansible.builtin.group:
        name: "{{ item_user.key }}"
        state: absent
      tags: [users]

    - name: "Delete config from sudoers.d for deleted user '{{ item_user.key }}'"
      ansible.builtin.file:
        path: "/etc/sudoers.d/{{ item_user.key }}"
        state: absent
      tags: [users]

- name: "Delete config from sudoers.d for user '{{ item_user.key }}'"
  ansible.builtin.file:
    path: "/etc/sudoers.d/{{ item_user.key }}"
    state: absent
  when:
    - item_user.value.sudo_nopassword is defined and not item_user.value.sudo_nopassword or
      item_user.value.sudo_nopassword is not defined
  tags: [users]
